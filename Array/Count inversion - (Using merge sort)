public class Main
{
    public static int merge(int[] arr, int[] temp, int left, int mid, int right)
    {
        int count = 0;
        int i = left, j = mid, k = left;
        while((i<=mid-1) && (j<=right))
        {
            if(arr[i]<=arr[j])
            {
                temp[k] = arr[i];
                i++;
                k++;
            }
            else
            {
                temp[k] = arr[j];
                j++;
                k++;
                count += mid-i;
            }
        }
        
        while(i<=mid-1)
        {
            temp[k] = arr[i];
            i++;
            k++;
        }
        
        while(j<=right)
        {
            temp[k] = arr[j];
            j++;
            k++;
        }
        
        for(i=left; i<=right; i++)
        arr[i] = temp[i];
        
        return count;
    }
    
    public static int mergeSort(int[] arr, int[] temp, int left, int right)
    {
        int countInv = 0;
        if(left<right)
        {
            int mid = (left+right)/2;
            countInv += mergeSort(arr,temp,left,mid);
            countInv += mergeSort(arr,temp,mid+1,right);
            
            countInv += merge(arr,temp,left,mid+1,right);
        }
        return countInv;
    }
    
    public static int countInversions(int[] arr)
    {
        int n = arr.length;
        int[] temp = new int[n];
        return mergeSort(arr,temp,0,n-1);
    }
    
	public static void main(String[] args) {
		int[] arr = {5,3,2,1,4};
		System.out.println(countInversions(arr));
	}
}

